## Actividad 01

- ¿Qué son los vértices?
- ¿Con qué figura geométrica se dibuja en 3D?
- ¿Qué es un shader?
- ¿Cómo se le llaman a los grupos de píxeles de un mismo triángulo?
- ¿Qué es un fragment shader?
- ¿Qué es un vertex shader?
- ¿Al proceso de determinar qué pixels del display va a cubrir cada triángulo de una mesh se le llama?
- ¿Qué es el render pipeline?
- ¿Hay alguna diferencia entre aplicar un color a una superficie de una mesh o aplicar una textura?
- ¿Cuál es la diferencia entre una textura y un material?
- ¿Qué transformaciones se requieren para mover un vértice del 3D world al View Screen?
- ¿Al proceso de convertir los triángulos en fragmentos se le llama?
- ¿Qué es el framebuffer?
- ¿Para qué se usa el Z-buffer o depth buffer en el render pipeline? 

## Actividad 02 

Observa la salida.

Ahora ejecuta el código original. Analiza los resultados y responde:

- ¿Cómo funciona?
- ¿Qué resultados obtuviste?
- ¿Estás usando un vertex shader?
- ¿Estás usando un fragment shader?
- Analiza el código de los shaders. ¿Qué hace cada uno? 

## Actividad 03

Ahora vas a pasar información personalizada de tu programa a los shaders. Vas a leer con detenimiento el tutorial Adding Uniforms.

- ¿Qué es un uniform?
- ¿Cómo funciona el código de aplicación, los shaders y cómo se comunican estos?

Modifica el código de la actividad para cambiar el color de cada uno de los píxeles de la pantalla personalizando el fragment shader.

## Actividad 4

Vas a realizar la última actividad de esta experiencia de aprendizaje. Yo sé que quieres seguir haciendo más, pero tenemos un tiempo muy limitado.

Analiza el ejemplo Adding some interactivity.

- ¿Qué hace el código del ejemplo?
- ¿Cómo funciona el código de aplicación, los shaders y cómo se comunican estos?
- Realiza modificaciones a ofApp.cpp y al vertex shader para conseguir otros comportamientos.
- Realiza modificaciones al fragment shader para conseguir otros comportamientos.
